At a much lower level of abstraction, modern processors can execute multiple
instructions at one time, a property known as instruction-level parallelism. For
example, early microprocessors, such as the 1978-vintage Intel 8086 required
multiple (typically, 3–10) clock cycles to execute a single instruction. More recent
processors can sustain execution rates of 2–4 instructions per clock cycle. Any
given instruction requires much longer from start to ﬁnish, perhaps 20 cycles or
more, but the processor uses a number of clever tricks to process as many as 100
instructions at a time. In Chapter 4, we will explore the use of pipelining, where the
actions required to execute an instruction are partitioned into different steps and
the processor hardware is organized as a series of stages, each performing one
of these steps. The stages can operate in parallel, working on different parts of
different instructions. We will see that a fairly simple hardware design can sustain
an execution rate close to one instruction per clock cycle.
Processors that can sustain execution rates faster than one instruction per
cycle are known as superscalar processors. Most modern processors support super-
scalar operation. In Chapter 5, we will describe a high-level model of such proces-
sors. We will see that application programmers can use this model to understand
the performance of their programs. They can then write programs such that the
generated code achieves higher degrees of instruction-level parallelism and there-
fore runs faster.
