Back to our hello example. When the shell loaded and ran the hello program,
and when the hello program printed its message, neither program accessed the
keyboard, display, disk, or main memory directly. Rather, they relied on the
services provided by the operating system. We can think of the operating system as
a layer of software interposed between the application program and the hardware,
as shown in Figure 1.10. All attempts by an application program to manipulate the
hardware must go through the operating system.
The operating system has two primary purposes: (1) to protect the hardware
from misuse by runaway applications, and (2) to provide applications with simple
and uniform mechanisms for manipulating complicated and often wildly different
low-level hardware devices. The operating system achieves both goals via the
fundamental abstractions shown in Figure 1.11: processes, virtual memory, and
ﬁles. As this ﬁgure suggests, ﬁles are abstractions for I/O devices, virtual memory
is an abstraction for both the main memory and disk I/O devices, and processes
are abstractions for the processor, main memory, and I/O devices. We will discuss
each in turn.
